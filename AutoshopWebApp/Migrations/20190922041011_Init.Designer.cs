// <auto-generated />
using System;
using AutoshopWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AutoshopWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190922041011_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AutoshopWebApp.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BodyNumber")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal?>("BuyingPrice")
                        .HasColumnType("decimal(16,2)");

                    b.Property<string>("ChassisNumber")
                        .HasMaxLength(100);

                    b.Property<string>("Color")
                        .IsRequired();

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("MarkAndModelId");

                    b.Property<string>("RegNumber")
                        .HasMaxLength(10);

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<decimal?>("ReleasePrice")
                        .HasColumnType("decimal(16,2)");

                    b.Property<int>("Run");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("decimal(16,2)");

                    b.HasKey("CarId");

                    b.HasIndex("MarkAndModelId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("AutoshopWebApp.Models.CarStateRef", b =>
                {
                    b.Property<int>("CarStateRefId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CarId");

                    b.Property<string>("Expert")
                        .HasMaxLength(100);

                    b.Property<decimal>("ExpertisePrice")
                        .HasColumnType("decimal(16,2)");

                    b.Property<DateTime>("ReferenceDate");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100);

                    b.HasKey("CarStateRefId");

                    b.HasIndex("CarId");

                    b.ToTable("CarStateRefId");
                });

            modelBuilder.Entity("AutoshopWebApp.Models.ClientBuyer", b =>
                {
                    b.Property<int>("ClientBuyerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50);

                    b.Property<int>("ApartmentNumber");

                    b.Property<DateTime>("BornDate");

                    b.Property<DateTime>("BuyDate");

                    b.Property<int>("CarId");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("HouseNumber");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PasIssueBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("PasIssueDate");

                    b.Property<string>("PasNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PaymentTypeId");

                    b.Property<int>("StreetId");

                    b.Property<int>("WorkerId");

                    b.HasKey("ClientBuyerId");

                    b.HasIndex("CarId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("StreetId");

                    b.HasIndex("WorkerId");

                    b.ToTable("ClientBuyers");
                });

            modelBuilder.Entity("AutoshopWebApp.Models.ClientSeller", b =>
                {
                    b.Property<int>("ClientSellerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApartmentNumber");

                    b.Property<DateTime>("BornDate");

                    b.Property<int>("CarId");

                    b.Property<string>("DocName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("DocNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("HouseNumber");

                    b.Property<DateTime>("IssueDate");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OwnDocIssuedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PasIssueBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("PasIssueDate");

                    b.Property<string>("PasNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("SellingDate");

                    b.Property<int>("StreetId");

                    b.Property<int>("WorkerId");

                    b.HasKey("ClientSellerId");

                    b.HasIndex("CarId");

                    b.HasIndex("StreetId");

                    b.HasIndex("WorkerId");

                    b.ToTable("ClientSellers");
                });

            modelBuilder.Entity("AutoshopWebApp.Models.MarkAndModel", b =>
                {
                    b.Property<int>("MarkAndModelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CarMark")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("MarkAndModelId");

                    b.ToTable("MarkAndModels");
                });

            modelBuilder.Entity("AutoshopWebApp.Models.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PaymentTypeName")
                        .HasMaxLength(100);

                    b.HasKey("PaymentTypeId");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("AutoshopWebApp.Models.PoolExpertiseReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CarId");

                    b.Property<string>("ClientFirstname")
                        .IsRequired();

                    b.Property<string>("ClientLastname")
                        .IsRequired();

                    b.Property<string>("ClientPatronymic")
                        .IsRequired();

                    b.Property<DateTime>("IssueDate");

                    b.Property<int>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("WorkerId");

                    b.ToTable("PoolExpertiseReferences");
                });

            modelBuilder.Entity("AutoshopWebApp.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PositionName")
                        .HasMaxLength(100);

                    b.Property<decimal>("Salary");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("AutoshopWebApp.Models.SparePart", b =>
                {
                    b.Property<int>("SparePartId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MarkAndModelId");

                    b.Property<int>("PartCount");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal>("PartPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SparePartId");

                    b.HasIndex("MarkAndModelId");

                    b.ToTable("SpareParts");
                });

            modelBuilder.Entity("AutoshopWebApp.Models.Street", b =>
                {
                    b.Property<int>("StreetId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StreetName")
                        .HasMaxLength(100);

                    b.HasKey("StreetId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("AutoshopWebApp.Models.TransactionOrder", b =>
                {
                    b.Property<int>("TransactionOrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PositionId");

                    b.Property<string>("Reason")
                        .HasMaxLength(200);

                    b.Property<int>("WorkerId");

                    b.HasKey("TransactionOrderId");

                    b.HasIndex("PositionId");

                    b.HasIndex("WorkerId");

                    b.ToTable("TransactionOrders");
                });

            modelBuilder.Entity("AutoshopWebApp.Models.Worker", b =>
                {
                    b.Property<int>("WorkerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApartmentNumber");

                    b.Property<DateTime>("BornDate");

                    b.Property<string>("Firstname")
                        .HasMaxLength(100);

                    b.Property<int>("HouseNumber");

                    b.Property<string>("Lastname")
                        .HasMaxLength(100);

                    b.Property<string>("Patronymic")
                        .HasMaxLength(100);

                    b.Property<int>("PositionId");

                    b.Property<int>("StreetId");

                    b.HasKey("WorkerId");

                    b.HasIndex("PositionId");

                    b.HasIndex("StreetId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("AutoshopWebApp.Models.WorkerUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IdentityUserId");

                    b.Property<int>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkerUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AutoshopWebApp.Models.Car", b =>
                {
                    b.HasOne("AutoshopWebApp.Models.MarkAndModel", "MarkAndModel")
                        .WithMany()
                        .HasForeignKey("MarkAndModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AutoshopWebApp.Models.CarStateRef", b =>
                {
                    b.HasOne("AutoshopWebApp.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AutoshopWebApp.Models.ClientBuyer", b =>
                {
                    b.HasOne("AutoshopWebApp.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoshopWebApp.Models.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoshopWebApp.Models.Street", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AutoshopWebApp.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AutoshopWebApp.Models.ClientSeller", b =>
                {
                    b.HasOne("AutoshopWebApp.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoshopWebApp.Models.Street", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AutoshopWebApp.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AutoshopWebApp.Models.PoolExpertiseReference", b =>
                {
                    b.HasOne("AutoshopWebApp.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoshopWebApp.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AutoshopWebApp.Models.SparePart", b =>
                {
                    b.HasOne("AutoshopWebApp.Models.MarkAndModel", "MarkAndModel")
                        .WithMany()
                        .HasForeignKey("MarkAndModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AutoshopWebApp.Models.TransactionOrder", b =>
                {
                    b.HasOne("AutoshopWebApp.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AutoshopWebApp.Models.Worker", "Worker")
                        .WithMany("TransactionOrders")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AutoshopWebApp.Models.Worker", b =>
                {
                    b.HasOne("AutoshopWebApp.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoshopWebApp.Models.Street", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AutoshopWebApp.Models.WorkerUser", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.HasOne("AutoshopWebApp.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
